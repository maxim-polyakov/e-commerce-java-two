import React, { useState } from 'react';
import { observer } from 'mobx-react-lite';
import { createProduct, fileToBase64 } from '../http/productApi';
import './AddProduct.css';

const AddProduct = observer(({ isOpen, onClose, onProductAdded }) => {
    const [formData, setFormData] = useState({
        name: '',
        shortDescription: '',
        longDescription: '',
        price: '',
        raiting: '',
        quantity: ''
    });

    const [imageFile, setImageFile] = useState(null);
    const [previewUrl, setPreviewUrl] = useState('');
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState('');

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({
            ...prev,
            [name]: value
        }));
    };

    const handleImageChange = (e) => {
        const file = e.target.files[0];
        if (file) {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
            if (!file.type.startsWith('image/')) {
                setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 5MB)
            if (file.size > 5 * 1024 * 1024) {
                setError('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB');
                return;
            }

            setImageFile(file);
            setError('');

            // –°–æ–∑–¥–∞–Ω–∏–µ preview
            const reader = new FileReader();
            reader.onload = (e) => {
                setPreviewUrl(e.target.result);
            };
            reader.readAsDataURL(file);
        }
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setLoading(true);
        setError('');

        try {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è
            if (!imageFile) {
                throw new Error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
            }

            if (!formData.name.trim()) {
                throw new Error('–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
            }

            if (!formData.price || formData.price <= 0) {
                throw new Error('–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
            }

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º fileToBase64 –∏–∑ productApi
            const base64Image = await fileToBase64(imageFile);

            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            const productData = {
                ...formData,
                image: base64Image,
                imageName: imageFile.name,
                price: parseFloat(formData.price),
                rating: formData.rating ? parseFloat(formData.rating) : 0,
                quantity: parseInt(formData.quantity) || 0
            };

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            await createProduct(productData);

            // –£—Å–ø–µ—Ö - –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
            onProductAdded();
            handleClose();

        } catch (err) {
            setError(err.message);
            console.error('Error creating product:', err);
        } finally {
            setLoading(false);
        }
    };

    const handleClose = () => {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
        setFormData({
            name: '',
            shortDescription: '',
            longDescription: '',
            price: '',
            rating: '',
            quantity: ''
        });
        setImageFile(null);
        setPreviewUrl('');
        setError('');
        setLoading(false);
        onClose();
    };

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Ñ–æ–Ω
    const handleBackdropClick = (e) => {
        if (e.target === e.currentTarget) {
            handleClose();
        }
    };

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ ESC
    React.useEffect(() => {
        const handleEscape = (e) => {
            if (e.keyCode === 27 && isOpen) {
                handleClose();
            }
        };

        document.addEventListener('keydown', handleEscape);
        return () => document.removeEventListener('keydown', handleEscape);
    }, [isOpen, handleClose]);

    if (!isOpen) return null;

    return (
        <div className="modal-backdrop" onClick={handleBackdropClick}>
            <div className="modal-content">
                <div className="modal-header">
                    <h2>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç</h2>
                    <button
                        className="close-button"
                        onClick={handleClose}
                        disabled={loading}
                    >
                        √ó
                    </button>
                </div>

                <form onSubmit={handleSubmit} className="product-form">
                    <div className="form-scrollable">
                        <div className="form-row">
                            {/* –ü–æ–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
                            <div className="form-group image-upload-group">
                                <label htmlFor="image">–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ *</label>
                                <div className="image-upload-area">
                                    <input
                                        type="file"
                                        id="image"
                                        accept="image/*"
                                        onChange={handleImageChange}
                                        className="image-input"
                                        disabled={loading}
                                    />
                                    {previewUrl ? (
                                        <div className="image-preview">
                                            <img src={previewUrl} alt="Preview" />
                                            <button
                                                type="button"
                                                className="remove-image-btn"
                                                onClick={() => {
                                                    setImageFile(null);
                                                    setPreviewUrl('');
                                                }}
                                                disabled={loading}
                                            >
                                                √ó
                                            </button>
                                        </div>
                                    ) : (
                                        <div className="image-placeholder">
                                            <span className="upload-icon">üìÅ</span>
                                            <p>–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
                                            <small>PNG, JPG, JPEG (–º–∞–∫—Å. 5MB)</small>
                                        </div>
                                    )}
                                </div>
                            </div>

                            {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                            <div className="form-column">
                                <div className="form-group">
                                    <label htmlFor="name">–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ *</label>
                                    <input
                                        type="text"
                                        id="name"
                                        name="name"
                                        value={formData.name}
                                        onChange={handleInputChange}
                                        required
                                        disabled={loading}
                                        placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞"
                                    />
                                </div>

                                <div className="form-group">
                                    <label htmlFor="price">–¶–µ–Ω–∞ (‚ÇΩ) *</label>
                                    <input
                                        type="number"
                                        id="price"
                                        name="price"
                                        value={formData.price}
                                        onChange={handleInputChange}
                                        min="0"
                                        step="0.01"
                                        required
                                        disabled={loading}
                                        placeholder="0.00"
                                    />
                                </div>

                                <div className="form-row-small">
                                    <div className="form-group">
                                        <label htmlFor="rating">–†–µ–π—Ç–∏–Ω–≥</label>
                                        <input
                                            type="number"
                                            id="rating"
                                            name="rating"
                                            value={formData.rating}
                                            onChange={handleInputChange}
                                            min="0"
                                            max="5"
                                            step="0.1"
                                            disabled={loading}
                                            placeholder="0.0"
                                        />
                                    </div>

                                    <div className="form-group">
                                        <label htmlFor="quantity">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</label>
                                        <input
                                            type="number"
                                            id="quantity"
                                            name="quantity"
                                            value={formData.quantity}
                                            onChange={handleInputChange}
                                            min="0"
                                            disabled={loading}
                                            placeholder="0"
                                        />
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div className="form-group">
                            <label htmlFor="shortDescription">–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</label>
                            <textarea
                                id="shortDescription"
                                name="shortDescription"
                                value={formData.shortDescription}
                                onChange={handleInputChange}
                                rows="2"
                                disabled={loading}
                                placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞"
                                maxLength="255"
                            />
                            <small>{formData.shortDescription.length}/255 —Å–∏–º–≤–æ–ª–æ–≤</small>
                        </div>

                        <div className="form-group">
                            <label htmlFor="longDescription">–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</label>
                            <textarea
                                id="longDescription"
                                name="longDescription"
                                value={formData.longDescription}
                                onChange={handleInputChange}
                                rows="3"
                                disabled={loading}
                                placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞"
                            />
                        </div>
                    </div>

                    {error && (
                        <div className="error-message">
                            {error}
                        </div>
                    )}

                    <div className="form-actions">
                        <button
                            type="button"
                            className="cancel-btn"
                            onClick={handleClose}
                            disabled={loading}
                        >
                            –û—Ç–º–µ–Ω–∞
                        </button>
                        <button
                            type="submit"
                            className="submit-btn"
                            disabled={loading}
                        >
                            {loading ? (
                                <>
                                    <div className="spinner"></div>
                                    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ...
                                </>
                            ) : (
                                '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç'
                            )}
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
});

export default AddProduct