import React, { useState, useEffect, useContext } from 'react';
import { observer } from 'mobx-react-lite';
import { getProducts } from '../http/productApi';
import cartStore from '../store/CartStore';
import { Context } from '../index';
import AddProduct from './AddProduct'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç AddProduct
import './ProductList.css';

const ProductList = observer(() => {
    const [products, setProducts] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [isAddProductOpen, setIsAddProductOpen] = useState(false);

    // –ü–æ–ª—É—á–∞–µ–º user –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const { user } = useContext(Context);

    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const [currentPage, setCurrentPage] = useState(0);
    const [itemsPerPage] = useState(8);
    const [totalPages, setTotalPages] = useState(0);
    const [totalElements, setTotalElements] = useState(0);

    // –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const API_BASE_URL = process.env.REACT_APP_API_URL || 'https://ecommerceapi.baxic.ru';
    const IMAGES_BASE_URL = `${API_BASE_URL}/images`;

    const fetchProducts = async () => {
        try {
            setLoading(true);
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –±—ç–∫–µ–Ω–¥–∞
            const response = await getProducts(currentPage, itemsPerPage);

            console.log('API Response:', response); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Spring Data Page –æ–±—ä–µ–∫—Ç
            if (response && response.content && Array.isArray(response.content)) {
                setProducts(response.content);
                setTotalPages(response.totalPages || 0);
                setTotalElements(response.totalElements || 0);
            } else {
                // Fallback –Ω–∞ —Å–ª—É—á–∞–π –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
                console.warn('Unexpected response format:', response);
                setProducts([]);
                setTotalPages(0);
                setTotalElements(0);
            }

        } catch (err) {
            setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.');
            console.error('Fetch products error:', err);
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchProducts();
    }, [currentPage, itemsPerPage]);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const getImageUrl = (imagePath) => {
        if (!imagePath) return null;

        // –ï—Å–ª–∏ —É–∂–µ –ø–æ–ª–Ω—ã–π URL, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if (imagePath.startsWith('http')) {
            return imagePath;
        }

        // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞, –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å
        return `${IMAGES_BASE_URL}/${imagePath}`;
    };

    const handleAddToCart = (product) => {
        cartStore.addToCart(product);
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
    const handleAddProduct = () => {
        setIsAddProductOpen(true);
    };

    // –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
    const handleProductAdded = () => {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        fetchProducts();
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
        setCurrentPage(0);
    };

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    const goToPage = (pageNumber) => {
        setCurrentPage(pageNumber);
        // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –≤–µ—Ä—Ö—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        window.scrollTo({ top: 0, behavior: 'smooth' });
    };

    const goToNextPage = () => {
        if (currentPage < totalPages - 1) {
            setCurrentPage(currentPage + 1);
            window.scrollTo({ top: 0, behavior: 'smooth' });
        }
    };

    const goToPrevPage = () => {
        if (currentPage > 0) {
            setCurrentPage(currentPage - 1);
            window.scrollTo({ top: 0, behavior: 'smooth' });
        }
    };

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const getPageNumbers = () => {
        if (totalPages <= 1) return [];

        const pageNumbers = [];
        const maxVisiblePages = 5;

        let startPage = Math.max(0, currentPage - Math.floor(maxVisiblePages / 2));
        let endPage = Math.min(totalPages - 1, startPage + maxVisiblePages - 1);

        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º startPage, –µ—Å–ª–∏ endPage –¥–æ—Å—Ç–∏–≥ –º–∞–∫—Å–∏–º—É–º–∞
        if (endPage - startPage + 1 < maxVisiblePages) {
            startPage = Math.max(0, endPage - maxVisiblePages + 1);
        }

        for (let i = startPage; i <= endPage; i++) {
            pageNumbers.push(i);
        }

        return pageNumbers;
    };

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ADMIN
    console.log(user?.user)
    const isAdmin = user?.user?.ROLE === 'ADMIN';

    if (loading) return (
        <div className="loading-container">
            <div className="loading-spinner"></div>
            <p>–ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã...</p>
        </div>
    );

    if (error) return (
        <div className="error-container">
            <div className="error-icon">‚ö†Ô∏è</div>
            <h3>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</h3>
            <p>{error}</p>
            <button
                className="retry-button"
                onClick={() => window.location.reload()}
            >
                –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </button>
        </div>
    );

    const pageNumbers = getPageNumbers();
    const displayPage = currentPage + 1; // –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (1-based)

    return (
        <div className="products-container">
            {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç AddProduct */}
            <AddProduct
                isOpen={isAddProductOpen}
                onClose={() => setIsAddProductOpen(false)}
                onProductAdded={handleProductAdded}
            />

            <div className="products-header">
                <div className="products-title-section">
                    <h2 className="products-title">–ù–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã</h2>
                    {/* –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ - —Ç–æ–ª—å–∫–æ –¥–ª—è ADMIN */}
                    {isAdmin && (
                        <button
                            className="add-product-btn"
                            onClick={handleAddProduct}
                            title="–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç"
                        >
                            <span className="add-product-icon">+</span>
                            –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç
                        </button>
                    )}
                </div>
                {totalElements > 0 && (
                    <div className="pagination-info">
                        –°—Ç—Ä–∞–Ω–∏—Ü–∞ {displayPage} –∏–∑ {totalPages}
                        {totalElements > 0 && ` (${totalElements} —Ç–æ–≤–∞—Ä–æ–≤ –≤—Å–µ–≥–æ)`}
                    </div>
                )}
            </div>

            {products.length > 0 ? (
                <>
                    <div className="products-grid">
                        {products.map(product => {
                            const imageUrl = getImageUrl(product.image);
                            const inventoryQuantity = product.inventory?.quantity || 0;
                            const isOutOfStock = inventoryQuantity === 0;

                            return (
                                <div key={product.id} className="product-card">
                                    {/* –ë–ª–æ–∫ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º */}
                                    <div className="product-image-section">
                                        <div className="product-image-container">
                                            {imageUrl ? (
                                                <img
                                                    src={imageUrl}
                                                    alt={product.name}
                                                    className="product-image"
                                                    onError={(e) => {
                                                        e.target.style.display = 'none';
                                                        e.target.nextSibling.style.display = 'flex';
                                                    }}
                                                />
                                            ) : null}
                                            <div
                                                className="image-placeholder"
                                                style={{ display: imageUrl ? 'none' : 'flex' }}
                                            >
                                                üõçÔ∏è
                                            </div>
                                        </div>

                                        {/* –ë–µ–π–¥–∂–∏ –ø–æ–≤–µ—Ä—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
                                        <div className="product-badges-overlay">
                                            <span className="inventory-badge">
                                                üì¶ {inventoryQuantity} –≤ –Ω–∞–ª–∏—á–∏–∏
                                            </span>
                                            {isOutOfStock && (
                                                <span className="out-of-stock-badge">–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏</span>
                                            )}
                                        </div>
                                    </div>

                                    <div className="product-content">
                                        <div className="product-header">
                                            <h3 className="product-name">{product.name}</h3>
                                            <span className="product-price">{product.price}‚ÇΩ</span>
                                        </div>

                                        <div className="product-descriptions">
                                            <p className="short-description">{product.shortDescription}</p>
                                            <p className="long-description">{product.longDescription}</p>
                                        </div>

                                        <div className="product-actions">
                                            <button
                                                className="add-to-cart-btn"
                                                onClick={() => handleAddToCart(product)}
                                                disabled={isOutOfStock}
                                            >
                                                {isOutOfStock ? '–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏' : '–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É'}
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            );
                        })}
                    </div>

                    {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
                    {totalPages > 1 && (
                        <div className="pagination-container">
                            <div className="pagination">
                                {/* –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" */}
                                <button
                                    className={`pagination-btn ${currentPage === 0 ? 'disabled' : ''}`}
                                    onClick={goToPrevPage}
                                    disabled={currentPage === 0}
                                >
                                    ‚Üê –ù–∞–∑–∞–¥
                                </button>

                                {/* –ù–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü */}
                                <div className="page-numbers">
                                    {pageNumbers.map(pageNumber => (
                                        <button
                                            key={pageNumber}
                                            className={`page-number ${currentPage === pageNumber ? 'active' : ''}`}
                                            onClick={() => goToPage(pageNumber)}
                                        >
                                            {pageNumber + 1} {/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º 1-based */}
                                        </button>
                                    ))}
                                </div>

                                {/* –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥" */}
                                <button
                                    className={`pagination-btn ${currentPage === totalPages - 1 ? 'disabled' : ''}`}
                                    onClick={goToNextPage}
                                    disabled={currentPage === totalPages - 1}
                                >
                                    –í–ø–µ—Ä–µ–¥ ‚Üí
                                </button>
                            </div>
                        </div>
                    )}
                </>
            ) : (
                /* –°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ */
                <div className="no-products">
                    <div className="no-products-icon">üì¶</div>
                    <h3>–ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                    <p>–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.</p>
                    {/* –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –ø—É—Å—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ - —Ç–æ–ª—å–∫–æ –¥–ª—è ADMIN */}
                    {isAdmin && (
                        <button
                            className="add-product-btn empty-state-btn"
                            onClick={handleAddProduct}
                        >
                            <span className="add-product-icon">+</span>
                            –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
                        </button>
                    )}
                </div>
            )}
        </div>
    );
});

export default ProductList;